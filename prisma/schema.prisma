// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum Gender {
  MALE
  FEMALE
}

enum Day {
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}

model Person {
  id               Int              @id @default(autoincrement())
  name             String
  photo            String?
  gender           Gender
  placeOfBirth     String?
  birthday         DateTime?
  addressLatitude  Decimal?
  addressLongitude Decimal?
  email            String?          @unique
  mobileNumber     String?          @unique
  github           String?
  linkedin         String?
  student          Student?
  teachSchedules   CourseSchedule[]
  electionVoters   ElectionVoter[]
}

model CampusRoom {
  id             Int              @id @default(autoincrement())
  name           String
  courseSchedule CourseSchedule[]
}

model Course {
  id              Int              @id @default(autoincrement())
  name            String
  duration        Int
  courseSchedules CourseSchedule[]
}

model Dorm {
  id         Int             @id @default(autoincrement())
  name       String
  dormBlocks DormBlock[]
  residents  ActiveStudent[]
}

model DormBlock {
  id     Int    @id @default(autoincrement())
  dorm   Dorm   @relation(fields: [dormId], references: [id])
  dormId Int
  name   String
}

model Generation {
  id       Int       @id @default(autoincrement())
  number   Int
  name     String?
  slogan   String?
  color    String?
  students Student[]
}

model Student {
  id            Int                 @id @default(autoincrement())
  person        Person              @relation(fields: [personId], references: [id])
  personId      Int                 @unique
  nim           String?
  generation    Generation          @relation(fields: [generationId], references: [id])
  generationId  Int
  activeStudent ActiveStudent?
  candidacies   ElectionCandidate[]
}

model ActiveStudent {
  id                    Int                    @id @default(autoincrement())
  student               Student                @relation(fields: [studentId], references: [id])
  studentId             Int                    @unique
  dorm                  Dorm                   @relation(fields: [dormId], references: [id])
  dormId                Int
  dormCleaningSchedules DormCleaningSchedule[]
  courseGroups          CourseGroup[]
  spiritualPoints       Int
  spiritualPenalties    Int
}

model CourseGroup {
  id              Int              @id @default(autoincrement())
  name            String
  participants    ActiveStudent[]
  courseSchedules CourseSchedule[]
}

model CourseSchedule {
  id            Int         @id @default(autoincrement())
  course        Course      @relation(fields: [courseId], references: [id])
  courseId      Int
  courseGroup   CourseGroup @relation(fields: [courseGroupId], references: [id])
  courseGroupId Int
  instructor    Person      @relation(fields: [instructorId], references: [id])
  instructorId  Int
  day           Day
  room          CampusRoom  @relation(fields: [campusRoomId], references: [id])
  campusRoomId  Int
}

model DormCleaningSchedule {
  id        Int           @id @default(autoincrement())
  week      Int
  day       Day
  student   ActiveStudent @relation(fields: [studentId], references: [id])
  studentId Int
}

model StudentRegistration {
  id   Int    @id @default(autoincrement())
  name String
}

model Post {
  id        Int      @id @default(autoincrement())
  title     String
  content   String?
  published Boolean? @default(false)
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  Int?
}

model Election {
  id         Int                 @id @default(autoincrement())
  year       Int                 @unique
  date       DateTime            @default(now())
  // apiKey     String              @default(uuid())
  candidates ElectionCandidate[]
  schedules  ElectionSchedule[]
  voters     ElectionVoter[]
  ballots    ElectionBallot[]
}

model ElectionSchedule {
  id         Int      @id @default(autoincrement())
  election   Election @relation(fields: [electionId], references: [id])
  electionId Int
  date       DateTime
  title      String
}

model ElectionVoter {
  id         Int      @id @default(autoincrement())
  election   Election @relation(fields: [electionId], references: [id])
  electionId Int
  person     Person   @relation(fields: [personId], references: [id])
  personId   Int
}

model ElectionCandidate {
  id         Int              @id @default(autoincrement())
  election   Election         @relation(fields: [electionId], references: [id])
  electionId Int
  student    Student          @relation(fields: [studentId], references: [id])
  studentId  Int
  number     Int
  color      String
  name       String?
  photo      String?
  vision     String?
  missions   String[]
  ballots    ElectionBallot[]
  votes      Int              @default(0)
}

model ElectionBallot {
  id          Int                @id @default(autoincrement())
  election    Election           @relation(fields: [electionId], references: [id])
  electionId  Int
  token       String             @unique
  strength    Int                @default(1)
  candidate   ElectionCandidate? @relation(fields: [candidateId], references: [id])
  candidateId Int?
  counted     Boolean            @default(false)
}

model Account {
  id                Int     @id @default(autoincrement())
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       Int
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
